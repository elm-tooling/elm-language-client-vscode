{
  "name": "elm-ls-vscode",
  "displayName": "Elm",
  "description": "Improving your Elm experience since 2019",
  "publisher": "elmTooling",
  "icon": "images/elm.png",
  "author": "Kolja Lampe",
  "license": "MIT",
  "version": "2.8.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/elm-tooling/elm-language-client-vscode"
  },
  "categories": [
    "Linters",
    "Snippets",
    "Programming Languages"
  ],
  "keywords": [
    "elm"
  ],
  "sponsor": {
    "url": "https://opencollective.com/elm-tooling"
  },
  "engines": {
    "vscode": "^1.63.0"
  },
  "activationEvents": [
    "workspaceContains:**/elm.json"
  ],
  "main": "./out/nodeClient",
  "browser": "./out/browserClient",
  "bin": {
    "elm-ls": "out/nodeServer.js"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "capabilities": {
    "virtualWorkspaces": {
      "supported": "limited",
      "description": "Some features like `elm make` and `elm-format` are not available in virtual workspaces."
    }
  },
  "contributes": {
    "languages": [
      {
        "id": "elm",
        "aliases": [
          "Elm",
          "elm"
        ],
        "extensions": [
          ".elm"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "elm.json",
        "url": "./schemas/elm.schema.json"
      },
      {
        "fileMatch": "elm-analyse.json",
        "url": "./schemas/elm-analyse.schema.json"
      }
    ],
    "grammars": [
      {
        "scopeName": "markdown.elm.codeblock",
        "path": "./syntaxes/codeblock.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.elm": "elm",
          "meta.embedded.block.glsl": "glsl"
        }
      },
      {
        "language": "elm",
        "scopeName": "source.elm",
        "path": "./syntaxes/elm-syntax.json"
      }
    ],
    "commands": [
      {
        "command": "elm.install",
        "title": "Install Package",
        "category": "Elm"
      },
      {
        "command": "elm.browsePackage",
        "title": "Browse Package",
        "category": "Elm"
      },
      {
        "command": "elm.commands.restart",
        "title": "Restart Elm Language Server",
        "category": "Elm"
      }
    ],
    "taskDefinitions": [
      {
        "type": "elm-test",
        "properties": {}
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Elm",
      "properties": {
        "elmLS.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        },
        "elmLS.elmPath": {
          "scope": "window",
          "type": "string",
          "default": "",
          "description": "The path to your elm executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder."
        },
        "elmLS.elmReviewPath": {
          "scope": "window",
          "type": "string",
          "default": "",
          "description": "The path to your elm-review executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder."
        },
        "elmLS.elmReviewDiagnostics": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "warning",
            "error"
          ],
          "default": "off",
          "description": "Set severity or disable linting diagnostics for elm-review."
        },
        "elmLS.elmFormatPath": {
          "scope": "window",
          "type": "string",
          "default": "",
          "description": "The path to your elm-format executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder."
        },
        "elmLS.elmTestPath": {
          "scope": "window",
          "type": "string",
          "default": "",
          "description": "The path to your elm-test executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder."
        },
        "elmLS.disableElmLSDiagnostics": {
          "scope": "window",
          "type": "boolean",
          "default": false,
          "description": "Disable linting diagnostics from the language server."
        },
        "elmLS.skipInstallPackageConfirmation": {
          "scope": "window",
          "type": "boolean",
          "default": false,
          "description": "Skips confirmation for the Install Package code action."
        },
        "elmLS.onlyUpdateDiagnosticsOnSave": {
          "scope": "window",
          "type": "boolean",
          "default": false,
          "description": "Only update compiler diagnostics on save, not on document change."
        },
        "elmLS.elmTestRunner.showElmTestOutput": {
          "description": "Show output of elm-test as terminal task",
          "type": "boolean",
          "scope": "resource"
        }
      }
    }
  },
  "scripts": {
    "version-patch": "npm --no-git-tag-version version patch",
    "version-minor": "npm --no-git-tag-version version minor",
    "version-major": "npm --no-git-tag-version version major",
    "version": "npm i && npm run compile",
    "compile": "npm run copy-wasm && tsc -b tsconfig.json && node ./scripts/build.js",
    "watch": "npm run copy-wasm && node ./scripts/build.js --watch",
    "copy-wasm": "copyfiles ./server/tree-sitter-elm.wasm out -f",
    "postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
    "test": "sh ./scripts/e2e.sh"
  },
  "dependencies": {
    "request": "2.88.2"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.10.5",
    "copyfiles": "^2.4.1",
    "esbuild": "^0.23.0",
    "path-browserify": "^1.0.1",
    "prettier": "^3.1.1",
    "typescript": "5.3.3",
    "util": "^0.12.5"
  }
}
